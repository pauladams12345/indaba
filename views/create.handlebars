
<h1 class="mt-5">Create New Event</h1>
<form class="mt-3 needs-validation" action="/create" novalidate>

 <div class="form-row">
   <div class="col col-sm-10 col-md-9 col-lg-6 col-xl-6 form-group">
     <label for="eventName">Event Name:</label>
     <input type="text" class="form-control" name="eventName"
     id="eventName" required>
   </div>
 </div>

 <div class="form-row">
   <div class="col col-sm-10 col-md-9 col-lg-6 col-xl-6 form-group">
     <label for="description">Description (optional):</label>
     <textarea class="form-control" name="description"
     id="description" rows="3"></textarea>
   </div>
 </div>

 <div class="form-row">
   <div class="col col-sm-10 col-md-9 col-lg-6 col-xl-6 form-group" id="organizerDiv">
     <label for="additionalOrganizer-1">
     Add additional event organizers (optional):</label>
     <small id="additionalOrganizerHelpText" class="form-text text-danger mt-0">
     These users will be able to make changes to your event!</small>
     <input type="text" class="form-control" name="additionalOrganizer-1"
     id="additionalOrganizer-1" placeholder="Type a valid OSU email address"
     oninput="validateOrganizer(this)">
     <div class="invalid-feedback">This is not a valid OSU email</div>
   </div>
 </div>

 <div class="form-row">
   <div class="col col-sm-10 col-md-9 col-lg-6 col-xl-6 form-group">
     <label for="defaultLocation">Location:</label>
     <small id="locationHelpText" class="form-text text-muted mt-0">
     You can change this for individual slots.</small>
     <input type="text" class="form-control" name="defaultLocation"
     id="defaultLocation" required>
   </div>
 </div>

 <div class="form-row">
   <div class="col col-sm-10 col-md-9 col-lg-6 col-xl-6 form-group">
     <label for="defaultMaxAttendees">Max attendees per time slot:</label>
     <small id="locationHelpText" class="form-text text-muted mt-0">
     You can change this for individual slots. Leave blank for no limit.</small>
     <input type="number" class="form-control" name="defaultMaxAttendees"
     id="defaultMaxAttendees">
   </div>
 </div>

 <div class="form-row">
   <div class="col col-sm-10 col-md-9 col-lg-6 col-xl-6 form-group">
     <label for="maxReservationsPerAttendee">
     Max reservations per attendee:</label>
     <small id="locationHelpText" class="form-text text-muted mt-0">
     Leave blank for no limit.</small>
     <input type="number" class="form-control" name="maxReservationsPerAttendee"
     id="maxReservationsPerAttendee">
   </div>
 </div>

 <fieldset class="form-group">
   <legend class="col-form-label">Time slot duration:</legend>
   <small id="defaultDurationHelpText" class="form-text text-muted mt-0">
   You can change this for individual slots.</small>
   <div class="form-row">
     <div class="col col-sm-8 col-md-6 col-lg-5 col-xl-4 form-group form-inline">
       <input type="number" class="form-control w-25"
       name="defaultDurationHours" id="defaultDurationHours" required>
       <label for="defaultDurationHours" class="mx-2">hours</label>
       <input type="number" class="form-control w-25" name="defaultDurationMinutes"
       id="defaultDurationMinutes" placeholder="0">
       <label for="defaultDurationMinutes" class="ml-2">minutes</label>
     </div>
   </div>
 </fieldset>


 <div class="form-row">
   <div class="col col-sm-10 col-md-9 col-lg-6 col-xl-6 form-check">
     <fieldset class="form-group">
       <legend class="col-form-label">
       Allow people to see who is registered for each slot?:</legend>
       <div class="form-check">
         <input type="radio" class="form-check-input" name="AttendeeNameVisibility"
         id="AttendeeNameVisibilityTrue" value="true" required>
         <label class="form-check-label" for="AttendeeNameVisibilityTrue">
           Yes, make names visible
         </label>
       </div>
       <div class="form-check">
         <input type="radio" class="form-check-input" name="AttendeeNameVisibility"
         id="AttendeeNameVisibilityFalse" value="false" required>
         <label class="form-check-label" for="AttendeeNameVisibilityFalse">
           No, keep names hidden
         </label>
       </div>

     </fieldset>
   </div>
 </div>

 <p>Choose time slots:</p>
  <!-- Calendar goes here -->
 <div id='calendar' class='m-1 p-1'></div>

 <div class="modal fade" id="addEvent" tabindex="-1" role="dialog" aria-labelledby="addEventLabel" aria-hidden="true">
   <div class="modal-dialog" role="document">
     <div class="modal-content">
       <div class="modal-header">
         <h5 class="modal-title" id="addEventLabel">Add Event</h5>
         <!--<button type="button" class="close" data-dismiss="modal" aria-label="Close">
           <span aria-hidden="true">&times;</span>
         </button>-->
       </div>
       <div class="modal-body">
         <form>
           <div class="form-group">
             <label for="Location" class="col-form-label">Location:</label>
             <input type="text" class="form-control" id="Location">
           </div>
           <div class="form-group">
             <label for="max-attendees" class="col-form-label">Max Attendees:</label>
             <input type="number" class="form-control" id="max-attendees">
           </div>
         </form>
       </div>
       <div class="modal-footer">
         <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
         <button type="button" class="btn btn-primary">Create Slot</button>
       </div>
     </div>
   </div>
 </div>

  <div class="form-row">
   <div class="col col-sm-10 col-md-9 col-lg-6 col-xl-6 form-group">
     <label for="emailAddresses">
     Enter email addresses of people you'd like to invite:</label>
     <small id="emailAddressesHelpText" class="form-text text-muted mt-0">
     You can always send more invitations later.</small>
     <textarea class="form-control" name="emailAddresses"
     id="emailAddresses" rows="3"></textarea>
   </div>
 </div>
 <button class="btn btn-primary mb-5" type-submit>Create event</button>
</form>

<script>
   var num_organizers = 1;
// Example starter JavaScript for disabling form submissions if there are invalid fields
(function validateForm() {
 'use strict';
   // On load
   window.addEventListener('load', function() {
       const organizer = document.getElementById('additionalOrganizer-1');
       organizer.addEventListener('blur', validateOrganizer);
       // Fetch all the forms we want to apply custom Bootstrap validation styles to
       var forms = document.getElementsByClassName('needs-validation');
       // Loop over them and prevent submission
       var validation = Array.prototype.filter.call(forms, function(form) {
           form.addEventListener('submit', function(event) {
               if (form.checkValidity() === false) {
                 event.preventDefault();
                 event.stopPropagation();
               }
               form.classList.add('was-validated');
           }, false);
       });
   }, false);
})();
function validateOrganizer(event) {
 if (this.value == "") {
   this.classList.remove('is-valid');
   this.classList.remove('is-invalid');
   this.setCustomValidity('');
 }
 else if (isValidOsuEmail(this.value)) {
   // Change styling to show valid input
   this.classList.remove('is-invalid');
   this.classList.add('is-valid');
   this.setCustomValidity('');
   // Create another organizer input
   num_organizers++;
   let newOrganizer = document.getElementById('additionalOrganizer-1').cloneNode();
   newOrganizer.setAttribute('id', 'additionalOrganizer-' + num_organizers);
   newOrganizer.classList.remove('is-valid');
   newOrganizer.value = "";
   // Create help text for new organizer input
   let newOrganizerHelpText = document.getElementById
   ('additionalOrganizerHelpText').cloneNode();
   // Append new organizer input and its help text to the document
   let organizerDiv = document.getElementById('organizerDiv');
   organizerDiv.appendChild(newOrganizer);
   organizerDiv.appendChild(newOrganizerHelpText);
   newOrganizer.addEventListener('blur', validateOrganizer);
 } else {
   this.classList.remove('is-valid');
   this.classList.add('is-invalid');
   this.setCustomValidity('Invalid OSU email');
 }
}
// function validateOsuEmail(input) {
// 	if (input.value == "") {
// 		input.classList.remove('is-valid');
// 		input.classList.remove('is-invalid');
// 	} else if (isValidOsuEmail(input.value)) {
// 		input.setCustomValidity('');	//Clears any validation errors
// 	} else {
// 		input.setCustomValidity('This is not a valid OSU email');
// 	}
// }
function isValidOsuEmail(email) {
 // let xhr = new XMLHttpRequest();
 // let reqBody = {email:null};
 // reqBody.email = email;
 // xhr.timeout = 2000;
 // xhr.open('POST', 'localhost:3000/validate/email');
 // xhr.setRequestHeader('Content-Type', 'application/json');
 // xhr.send(email);
 // xhr.onload = function() {
 // 	if (xhr.status != 200) {
 // 		console.log('Error ' + xhr.status + ': ' + xhr.statusText);
 // 	} else {
 // 		// do something with response
 // 		console.log(xhr.response);
 // 	}
 // };
 // xhr.onerror = function() {
 // 	console.log('Validation to OSU LDAP server failed.');
 // };
 if (email == "abc") {
   return true;
 } else {
   return false;
 }
}
// Fetches a resource, resolving an error if the request times out
function timedFetch(url, options) {
 return new Promise( function(resolve, reject) {
   let timer = setTimeout(
     function() {
       reject(new Error('Fetch timed out') );
     }, 2000
   );
   fetch(url, options)
   .then(
     function(response) {
       resolve(response);
   }).catch(
     function(err) {
       reject(err);
   }).finally(
     function() {
       clearTimeout(timer);
   });
 });
}
</script>
